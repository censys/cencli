// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/censys/cencli/internal/pkg/clients/censys (interfaces: GlobalDataClient)
//
// Generated by this command:
//
//	mockgen -destination=../../../../gen/client/mocks/globaldata_mock.go -package=mocks github.com/censys/cencli/internal/pkg/clients/censys GlobalDataClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	censys "github.com/censys/cencli/internal/pkg/clients/censys"
	components "github.com/censys/censys-sdk-go/models/components"
	mo "github.com/samber/mo"
	gomock "go.uber.org/mock/gomock"
)

// MockGlobalDataClient is a mock of GlobalDataClient interface.
type MockGlobalDataClient struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalDataClientMockRecorder
	isgomock struct{}
}

// MockGlobalDataClientMockRecorder is the mock recorder for MockGlobalDataClient.
type MockGlobalDataClientMockRecorder struct {
	mock *MockGlobalDataClient
}

// NewMockGlobalDataClient creates a new mock instance.
func NewMockGlobalDataClient(ctrl *gomock.Controller) *MockGlobalDataClient {
	mock := &MockGlobalDataClient{ctrl: ctrl}
	mock.recorder = &MockGlobalDataClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalDataClient) EXPECT() *MockGlobalDataClientMockRecorder {
	return m.recorder
}

// Aggregate mocks base method.
func (m *MockGlobalDataClient) Aggregate(ctx context.Context, orgID mo.Option[string], query, field string, numBuckets int64, countByLevel mo.Option[string], filterByQuery mo.Option[bool]) (censys.Result[components.SearchAggregateResponse], censys.ClientError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate", ctx, orgID, query, field, numBuckets, countByLevel, filterByQuery)
	ret0, _ := ret[0].(censys.Result[components.SearchAggregateResponse])
	ret1, _ := ret[1].(censys.ClientError)
	return ret0, ret1
}

// Aggregate indicates an expected call of Aggregate.
func (mr *MockGlobalDataClientMockRecorder) Aggregate(ctx, orgID, query, field, numBuckets, countByLevel, filterByQuery any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockGlobalDataClient)(nil).Aggregate), ctx, orgID, query, field, numBuckets, countByLevel, filterByQuery)
}

// GetCertificates mocks base method.
func (m *MockGlobalDataClient) GetCertificates(ctx context.Context, orgID mo.Option[string], certificateIDs []string) (censys.Result[[]components.Certificate], censys.ClientError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificates", ctx, orgID, certificateIDs)
	ret0, _ := ret[0].(censys.Result[[]components.Certificate])
	ret1, _ := ret[1].(censys.ClientError)
	return ret0, ret1
}

// GetCertificates indicates an expected call of GetCertificates.
func (mr *MockGlobalDataClientMockRecorder) GetCertificates(ctx, orgID, certificateIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificates", reflect.TypeOf((*MockGlobalDataClient)(nil).GetCertificates), ctx, orgID, certificateIDs)
}

// GetHosts mocks base method.
func (m *MockGlobalDataClient) GetHosts(ctx context.Context, orgID mo.Option[string], hostIDs []string, atTime mo.Option[time.Time]) (censys.Result[[]components.Host], censys.ClientError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHosts", ctx, orgID, hostIDs, atTime)
	ret0, _ := ret[0].(censys.Result[[]components.Host])
	ret1, _ := ret[1].(censys.ClientError)
	return ret0, ret1
}

// GetHosts indicates an expected call of GetHosts.
func (mr *MockGlobalDataClientMockRecorder) GetHosts(ctx, orgID, hostIDs, atTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHosts", reflect.TypeOf((*MockGlobalDataClient)(nil).GetHosts), ctx, orgID, hostIDs, atTime)
}

// GetWebProperties mocks base method.
func (m *MockGlobalDataClient) GetWebProperties(ctx context.Context, orgID mo.Option[string], webPropertyIDs []string, atTime mo.Option[time.Time]) (censys.Result[[]components.Webproperty], censys.ClientError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebProperties", ctx, orgID, webPropertyIDs, atTime)
	ret0, _ := ret[0].(censys.Result[[]components.Webproperty])
	ret1, _ := ret[1].(censys.ClientError)
	return ret0, ret1
}

// GetWebProperties indicates an expected call of GetWebProperties.
func (mr *MockGlobalDataClientMockRecorder) GetWebProperties(ctx, orgID, webPropertyIDs, atTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebProperties", reflect.TypeOf((*MockGlobalDataClient)(nil).GetWebProperties), ctx, orgID, webPropertyIDs, atTime)
}

// HostTimeline mocks base method.
func (m *MockGlobalDataClient) HostTimeline(ctx context.Context, orgID mo.Option[string], hostID string, fromTime, toTime time.Time) (censys.Result[components.HostTimeline], censys.ClientError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostTimeline", ctx, orgID, hostID, fromTime, toTime)
	ret0, _ := ret[0].(censys.Result[components.HostTimeline])
	ret1, _ := ret[1].(censys.ClientError)
	return ret0, ret1
}

// HostTimeline indicates an expected call of HostTimeline.
func (mr *MockGlobalDataClientMockRecorder) HostTimeline(ctx, orgID, hostID, fromTime, toTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostTimeline", reflect.TypeOf((*MockGlobalDataClient)(nil).HostTimeline), ctx, orgID, hostID, fromTime, toTime)
}

// Search mocks base method.
func (m *MockGlobalDataClient) Search(ctx context.Context, orgID mo.Option[string], query string, fields []string, pageSize mo.Option[int64], pageToken mo.Option[string]) (censys.Result[components.SearchQueryResponse], censys.ClientError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, orgID, query, fields, pageSize, pageToken)
	ret0, _ := ret[0].(censys.Result[components.SearchQueryResponse])
	ret1, _ := ret[1].(censys.ClientError)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockGlobalDataClientMockRecorder) Search(ctx, orgID, query, fields, pageSize, pageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockGlobalDataClient)(nil).Search), ctx, orgID, query, fields, pageSize, pageToken)
}
