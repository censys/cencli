// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/censys/cencli/internal/pkg/clients/censys (interfaces: CollectionsClient)
//
// Generated by this command:
//
//	mockgen -destination=../../../../gen/client/mocks/collections_client_mock.go -package=mocks github.com/censys/cencli/internal/pkg/clients/censys CollectionsClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	censys "github.com/censys/cencli/internal/pkg/clients/censys"
	components "github.com/censys/censys-sdk-go/models/components"
	mo "github.com/samber/mo"
	gomock "go.uber.org/mock/gomock"
)

// MockCollectionsClient is a mock of CollectionsClient interface.
type MockCollectionsClient struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionsClientMockRecorder
	isgomock struct{}
}

// MockCollectionsClientMockRecorder is the mock recorder for MockCollectionsClient.
type MockCollectionsClientMockRecorder struct {
	mock *MockCollectionsClient
}

// NewMockCollectionsClient creates a new mock instance.
func NewMockCollectionsClient(ctrl *gomock.Controller) *MockCollectionsClient {
	mock := &MockCollectionsClient{ctrl: ctrl}
	mock.recorder = &MockCollectionsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionsClient) EXPECT() *MockCollectionsClientMockRecorder {
	return m.recorder
}

// AggregateCollection mocks base method.
func (m *MockCollectionsClient) AggregateCollection(ctx context.Context, collectionID string, orgID mo.Option[string], query, field string, numBuckets int64, countByLevel mo.Option[string], filterByQuery mo.Option[bool]) (censys.Result[components.SearchAggregateResponse], censys.ClientError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateCollection", ctx, collectionID, orgID, query, field, numBuckets, countByLevel, filterByQuery)
	ret0, _ := ret[0].(censys.Result[components.SearchAggregateResponse])
	ret1, _ := ret[1].(censys.ClientError)
	return ret0, ret1
}

// AggregateCollection indicates an expected call of AggregateCollection.
func (mr *MockCollectionsClientMockRecorder) AggregateCollection(ctx, collectionID, orgID, query, field, numBuckets, countByLevel, filterByQuery any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateCollection", reflect.TypeOf((*MockCollectionsClient)(nil).AggregateCollection), ctx, collectionID, orgID, query, field, numBuckets, countByLevel, filterByQuery)
}

// SearchCollection mocks base method.
func (m *MockCollectionsClient) SearchCollection(ctx context.Context, collectionID string, orgID mo.Option[string], query string, fields []string, pageSize mo.Option[int64], pageToken mo.Option[string]) (censys.Result[components.SearchQueryResponse], censys.ClientError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCollection", ctx, collectionID, orgID, query, fields, pageSize, pageToken)
	ret0, _ := ret[0].(censys.Result[components.SearchQueryResponse])
	ret1, _ := ret[1].(censys.ClientError)
	return ret0, ret1
}

// SearchCollection indicates an expected call of SearchCollection.
func (mr *MockCollectionsClientMockRecorder) SearchCollection(ctx, collectionID, orgID, query, fields, pageSize, pageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCollection", reflect.TypeOf((*MockCollectionsClient)(nil).SearchCollection), ctx, collectionID, orgID, query, fields, pageSize, pageToken)
}
