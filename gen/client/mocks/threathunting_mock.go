// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/censys/cencli/internal/pkg/clients/censys (interfaces: ThreatHuntingClient)
//
// Generated by this command:
//
//	mockgen -destination=../../../../gen/client/mocks/threathunting_mock.go -package=mocks github.com/censys/cencli/internal/pkg/clients/censys ThreatHuntingClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	censys "github.com/censys/cencli/internal/pkg/clients/censys"
	components "github.com/censys/censys-sdk-go/models/components"
	mo "github.com/samber/mo"
	gomock "go.uber.org/mock/gomock"
)

// MockThreatHuntingClient is a mock of ThreatHuntingClient interface.
type MockThreatHuntingClient struct {
	ctrl     *gomock.Controller
	recorder *MockThreatHuntingClientMockRecorder
	isgomock struct{}
}

// MockThreatHuntingClientMockRecorder is the mock recorder for MockThreatHuntingClient.
type MockThreatHuntingClientMockRecorder struct {
	mock *MockThreatHuntingClient
}

// NewMockThreatHuntingClient creates a new mock instance.
func NewMockThreatHuntingClient(ctrl *gomock.Controller) *MockThreatHuntingClient {
	mock := &MockThreatHuntingClient{ctrl: ctrl}
	mock.recorder = &MockThreatHuntingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThreatHuntingClient) EXPECT() *MockThreatHuntingClientMockRecorder {
	return m.recorder
}

// GetHostObservationsWithCertificate mocks base method.
func (m *MockThreatHuntingClient) GetHostObservationsWithCertificate(ctx context.Context, orgID mo.Option[string], certificateID string, startTime, endTime mo.Option[time.Time], port mo.Option[int], protocol mo.Option[string], pageSize mo.Option[int64], pageToken mo.Option[string]) (censys.Result[components.HostObservationResponse], censys.ClientError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostObservationsWithCertificate", ctx, orgID, certificateID, startTime, endTime, port, protocol, pageSize, pageToken)
	ret0, _ := ret[0].(censys.Result[components.HostObservationResponse])
	ret1, _ := ret[1].(censys.ClientError)
	return ret0, ret1
}

// GetHostObservationsWithCertificate indicates an expected call of GetHostObservationsWithCertificate.
func (mr *MockThreatHuntingClientMockRecorder) GetHostObservationsWithCertificate(ctx, orgID, certificateID, startTime, endTime, port, protocol, pageSize, pageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostObservationsWithCertificate", reflect.TypeOf((*MockThreatHuntingClient)(nil).GetHostObservationsWithCertificate), ctx, orgID, certificateID, startTime, endTime, port, protocol, pageSize, pageToken)
}

// GetValueCounts mocks base method.
func (m *MockThreatHuntingClient) GetValueCounts(ctx context.Context, orgID, query mo.Option[string], andCountConditions []components.CountCondition) (censys.Result[components.ValueCountsResponse], censys.ClientError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValueCounts", ctx, orgID, query, andCountConditions)
	ret0, _ := ret[0].(censys.Result[components.ValueCountsResponse])
	ret1, _ := ret[1].(censys.ClientError)
	return ret0, ret1
}

// GetValueCounts indicates an expected call of GetValueCounts.
func (mr *MockThreatHuntingClientMockRecorder) GetValueCounts(ctx, orgID, query, andCountConditions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValueCounts", reflect.TypeOf((*MockThreatHuntingClient)(nil).GetValueCounts), ctx, orgID, query, andCountConditions)
}
