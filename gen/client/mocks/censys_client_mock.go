// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/censys/cencli/internal/pkg/clients/censys (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=../../../../gen/client/mocks/censys_client_mock.go -package=mocks -imports components=github.com/censys/censys-sdk-go/models/components github.com/censys/cencli/internal/pkg/clients/censys Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	censys "github.com/censys/cencli/internal/pkg/clients/censys"
	components "github.com/censys/censys-sdk-go/models/components"
	mo "github.com/samber/mo"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Aggregate mocks base method.
func (m *MockClient) Aggregate(ctx context.Context, orgID mo.Option[string], query, field string, numBuckets int64, countByLevel mo.Option[string], filterByQuery mo.Option[bool]) (censys.Result[components.SearchAggregateResponse], censys.ClientError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate", ctx, orgID, query, field, numBuckets, countByLevel, filterByQuery)
	ret0, _ := ret[0].(censys.Result[components.SearchAggregateResponse])
	ret1, _ := ret[1].(censys.ClientError)
	return ret0, ret1
}

// Aggregate indicates an expected call of Aggregate.
func (mr *MockClientMockRecorder) Aggregate(ctx, orgID, query, field, numBuckets, countByLevel, filterByQuery any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockClient)(nil).Aggregate), ctx, orgID, query, field, numBuckets, countByLevel, filterByQuery)
}

// AggregateCollection mocks base method.
func (m *MockClient) AggregateCollection(ctx context.Context, collectionID string, orgID mo.Option[string], query, field string, numBuckets int64, countByLevel mo.Option[string], filterByQuery mo.Option[bool]) (censys.Result[components.SearchAggregateResponse], censys.ClientError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateCollection", ctx, collectionID, orgID, query, field, numBuckets, countByLevel, filterByQuery)
	ret0, _ := ret[0].(censys.Result[components.SearchAggregateResponse])
	ret1, _ := ret[1].(censys.ClientError)
	return ret0, ret1
}

// AggregateCollection indicates an expected call of AggregateCollection.
func (mr *MockClientMockRecorder) AggregateCollection(ctx, collectionID, orgID, query, field, numBuckets, countByLevel, filterByQuery any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateCollection", reflect.TypeOf((*MockClient)(nil).AggregateCollection), ctx, collectionID, orgID, query, field, numBuckets, countByLevel, filterByQuery)
}

// GetCertificates mocks base method.
func (m *MockClient) GetCertificates(ctx context.Context, orgID mo.Option[string], certificateIDs []string) (censys.Result[[]components.Certificate], censys.ClientError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificates", ctx, orgID, certificateIDs)
	ret0, _ := ret[0].(censys.Result[[]components.Certificate])
	ret1, _ := ret[1].(censys.ClientError)
	return ret0, ret1
}

// GetCertificates indicates an expected call of GetCertificates.
func (mr *MockClientMockRecorder) GetCertificates(ctx, orgID, certificateIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificates", reflect.TypeOf((*MockClient)(nil).GetCertificates), ctx, orgID, certificateIDs)
}

// GetHostObservationsWithCertificate mocks base method.
func (m *MockClient) GetHostObservationsWithCertificate(ctx context.Context, orgID mo.Option[string], certificateID string, startTime, endTime mo.Option[time.Time], port mo.Option[int], protocol mo.Option[string], pageSize mo.Option[int64], pageToken mo.Option[string]) (censys.Result[components.HostObservationResponse], censys.ClientError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostObservationsWithCertificate", ctx, orgID, certificateID, startTime, endTime, port, protocol, pageSize, pageToken)
	ret0, _ := ret[0].(censys.Result[components.HostObservationResponse])
	ret1, _ := ret[1].(censys.ClientError)
	return ret0, ret1
}

// GetHostObservationsWithCertificate indicates an expected call of GetHostObservationsWithCertificate.
func (mr *MockClientMockRecorder) GetHostObservationsWithCertificate(ctx, orgID, certificateID, startTime, endTime, port, protocol, pageSize, pageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostObservationsWithCertificate", reflect.TypeOf((*MockClient)(nil).GetHostObservationsWithCertificate), ctx, orgID, certificateID, startTime, endTime, port, protocol, pageSize, pageToken)
}

// GetHosts mocks base method.
func (m *MockClient) GetHosts(ctx context.Context, orgID mo.Option[string], hostIDs []string, atTime mo.Option[time.Time]) (censys.Result[[]components.Host], censys.ClientError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHosts", ctx, orgID, hostIDs, atTime)
	ret0, _ := ret[0].(censys.Result[[]components.Host])
	ret1, _ := ret[1].(censys.ClientError)
	return ret0, ret1
}

// GetHosts indicates an expected call of GetHosts.
func (mr *MockClientMockRecorder) GetHosts(ctx, orgID, hostIDs, atTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHosts", reflect.TypeOf((*MockClient)(nil).GetHosts), ctx, orgID, hostIDs, atTime)
}

// GetValueCounts mocks base method.
func (m *MockClient) GetValueCounts(ctx context.Context, orgID, query mo.Option[string], andCountConditions []components.CountCondition) (censys.Result[components.ValueCountsResponse], censys.ClientError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValueCounts", ctx, orgID, query, andCountConditions)
	ret0, _ := ret[0].(censys.Result[components.ValueCountsResponse])
	ret1, _ := ret[1].(censys.ClientError)
	return ret0, ret1
}

// GetValueCounts indicates an expected call of GetValueCounts.
func (mr *MockClientMockRecorder) GetValueCounts(ctx, orgID, query, andCountConditions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValueCounts", reflect.TypeOf((*MockClient)(nil).GetValueCounts), ctx, orgID, query, andCountConditions)
}

// GetWebProperties mocks base method.
func (m *MockClient) GetWebProperties(ctx context.Context, orgID mo.Option[string], webPropertyIDs []string, atTime mo.Option[time.Time]) (censys.Result[[]components.Webproperty], censys.ClientError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebProperties", ctx, orgID, webPropertyIDs, atTime)
	ret0, _ := ret[0].(censys.Result[[]components.Webproperty])
	ret1, _ := ret[1].(censys.ClientError)
	return ret0, ret1
}

// GetWebProperties indicates an expected call of GetWebProperties.
func (mr *MockClientMockRecorder) GetWebProperties(ctx, orgID, webPropertyIDs, atTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebProperties", reflect.TypeOf((*MockClient)(nil).GetWebProperties), ctx, orgID, webPropertyIDs, atTime)
}

// HasOrgID mocks base method.
func (m *MockClient) HasOrgID() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasOrgID")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasOrgID indicates an expected call of HasOrgID.
func (mr *MockClientMockRecorder) HasOrgID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasOrgID", reflect.TypeOf((*MockClient)(nil).HasOrgID))
}

// HostTimeline mocks base method.
func (m *MockClient) HostTimeline(ctx context.Context, orgID mo.Option[string], hostID string, fromTime, toTime time.Time) (censys.Result[components.HostTimeline], censys.ClientError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostTimeline", ctx, orgID, hostID, fromTime, toTime)
	ret0, _ := ret[0].(censys.Result[components.HostTimeline])
	ret1, _ := ret[1].(censys.ClientError)
	return ret0, ret1
}

// HostTimeline indicates an expected call of HostTimeline.
func (mr *MockClientMockRecorder) HostTimeline(ctx, orgID, hostID, fromTime, toTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostTimeline", reflect.TypeOf((*MockClient)(nil).HostTimeline), ctx, orgID, hostID, fromTime, toTime)
}

// Search mocks base method.
func (m *MockClient) Search(ctx context.Context, orgID mo.Option[string], query string, fields []string, pageSize mo.Option[int64], pageToken mo.Option[string]) (censys.Result[components.SearchQueryResponse], censys.ClientError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, orgID, query, fields, pageSize, pageToken)
	ret0, _ := ret[0].(censys.Result[components.SearchQueryResponse])
	ret1, _ := ret[1].(censys.ClientError)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockClientMockRecorder) Search(ctx, orgID, query, fields, pageSize, pageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockClient)(nil).Search), ctx, orgID, query, fields, pageSize, pageToken)
}

// SearchCollection mocks base method.
func (m *MockClient) SearchCollection(ctx context.Context, collectionID string, orgID mo.Option[string], query string, fields []string, pageSize mo.Option[int64], pageToken mo.Option[string]) (censys.Result[components.SearchQueryResponse], censys.ClientError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCollection", ctx, collectionID, orgID, query, fields, pageSize, pageToken)
	ret0, _ := ret[0].(censys.Result[components.SearchQueryResponse])
	ret1, _ := ret[1].(censys.ClientError)
	return ret0, ret1
}

// SearchCollection indicates an expected call of SearchCollection.
func (mr *MockClientMockRecorder) SearchCollection(ctx, collectionID, orgID, query, fields, pageSize, pageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCollection", reflect.TypeOf((*MockClient)(nil).SearchCollection), ctx, collectionID, orgID, query, fields, pageSize, pageToken)
}
