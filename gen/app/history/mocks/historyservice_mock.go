// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/censys/cencli/internal/app/history (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination=../../../gen/app/history/mocks/historyservice_mock.go -package=mocks -mock_names Service=MockHistoryService . Service
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	history "github.com/censys/cencli/internal/app/history"
	cenclierrors "github.com/censys/cencli/internal/pkg/cenclierrors"
	assets "github.com/censys/cencli/internal/pkg/domain/assets"
	identifiers "github.com/censys/cencli/internal/pkg/domain/identifiers"
	mo "github.com/samber/mo"
	gomock "go.uber.org/mock/gomock"
)

// MockHistoryService is a mock of Service interface.
type MockHistoryService struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryServiceMockRecorder
	isgomock struct{}
}

// MockHistoryServiceMockRecorder is the mock recorder for MockHistoryService.
type MockHistoryServiceMockRecorder struct {
	mock *MockHistoryService
}

// NewMockHistoryService creates a new mock instance.
func NewMockHistoryService(ctrl *gomock.Controller) *MockHistoryService {
	mock := &MockHistoryService{ctrl: ctrl}
	mock.recorder = &MockHistoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryService) EXPECT() *MockHistoryServiceMockRecorder {
	return m.recorder
}

// GetCertificateHistory mocks base method.
func (m *MockHistoryService) GetCertificateHistory(ctx context.Context, orgID mo.Option[identifiers.OrganizationID], certificateID assets.CertificateID, fromTime, toTime time.Time) (history.CertificateHistoryResult, cenclierrors.CencliError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateHistory", ctx, orgID, certificateID, fromTime, toTime)
	ret0, _ := ret[0].(history.CertificateHistoryResult)
	ret1, _ := ret[1].(cenclierrors.CencliError)
	return ret0, ret1
}

// GetCertificateHistory indicates an expected call of GetCertificateHistory.
func (mr *MockHistoryServiceMockRecorder) GetCertificateHistory(ctx, orgID, certificateID, fromTime, toTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateHistory", reflect.TypeOf((*MockHistoryService)(nil).GetCertificateHistory), ctx, orgID, certificateID, fromTime, toTime)
}

// GetHostHistory mocks base method.
func (m *MockHistoryService) GetHostHistory(ctx context.Context, orgID mo.Option[identifiers.OrganizationID], host assets.HostID, fromTime, toTime time.Time) (history.HostHistoryResult, cenclierrors.CencliError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostHistory", ctx, orgID, host, fromTime, toTime)
	ret0, _ := ret[0].(history.HostHistoryResult)
	ret1, _ := ret[1].(cenclierrors.CencliError)
	return ret0, ret1
}

// GetHostHistory indicates an expected call of GetHostHistory.
func (mr *MockHistoryServiceMockRecorder) GetHostHistory(ctx, orgID, host, fromTime, toTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostHistory", reflect.TypeOf((*MockHistoryService)(nil).GetHostHistory), ctx, orgID, host, fromTime, toTime)
}

// GetWebPropertyHistory mocks base method.
func (m *MockHistoryService) GetWebPropertyHistory(ctx context.Context, orgID mo.Option[identifiers.OrganizationID], webPropertyID assets.WebPropertyID, fromTime, toTime time.Time) (history.WebPropertyHistoryResult, cenclierrors.CencliError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebPropertyHistory", ctx, orgID, webPropertyID, fromTime, toTime)
	ret0, _ := ret[0].(history.WebPropertyHistoryResult)
	ret1, _ := ret[1].(cenclierrors.CencliError)
	return ret0, ret1
}

// GetWebPropertyHistory indicates an expected call of GetWebPropertyHistory.
func (mr *MockHistoryServiceMockRecorder) GetWebPropertyHistory(ctx, orgID, webPropertyID, fromTime, toTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebPropertyHistory", reflect.TypeOf((*MockHistoryService)(nil).GetWebPropertyHistory), ctx, orgID, webPropertyID, fromTime, toTime)
}
