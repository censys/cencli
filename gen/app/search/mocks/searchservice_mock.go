// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/censys/cencli/internal/app/search (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination=../../../gen/app/search/mocks/searchservice_mock.go -package=mocks -mock_names Service=MockSearchService . Service
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	search "github.com/censys/cencli/internal/app/search"
	cenclierrors "github.com/censys/cencli/internal/pkg/cenclierrors"
	gomock "go.uber.org/mock/gomock"
)

// MockSearchService is a mock of Service interface.
type MockSearchService struct {
	ctrl     *gomock.Controller
	recorder *MockSearchServiceMockRecorder
	isgomock struct{}
}

// MockSearchServiceMockRecorder is the mock recorder for MockSearchService.
type MockSearchServiceMockRecorder struct {
	mock *MockSearchService
}

// NewMockSearchService creates a new mock instance.
func NewMockSearchService(ctrl *gomock.Controller) *MockSearchService {
	mock := &MockSearchService{ctrl: ctrl}
	mock.recorder = &MockSearchServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchService) EXPECT() *MockSearchServiceMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockSearchService) Search(ctx context.Context, params search.Params) (search.Result, cenclierrors.CencliError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, params)
	ret0, _ := ret[0].(search.Result)
	ret1, _ := ret[1].(cenclierrors.CencliError)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSearchServiceMockRecorder) Search(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSearchService)(nil).Search), ctx, params)
}
