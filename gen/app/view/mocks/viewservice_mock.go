// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/censys/cencli/internal/app/view (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination=../../../gen/app/view/mocks/viewservice_mock.go -package=mocks -mock_names Service=MockViewService . Service
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	view "github.com/censys/cencli/internal/app/view"
	cenclierrors "github.com/censys/cencli/internal/pkg/cenclierrors"
	assets "github.com/censys/cencli/internal/pkg/domain/assets"
	identifiers "github.com/censys/cencli/internal/pkg/domain/identifiers"
	mo "github.com/samber/mo"
	gomock "go.uber.org/mock/gomock"
)

// MockViewService is a mock of Service interface.
type MockViewService struct {
	ctrl     *gomock.Controller
	recorder *MockViewServiceMockRecorder
	isgomock struct{}
}

// MockViewServiceMockRecorder is the mock recorder for MockViewService.
type MockViewServiceMockRecorder struct {
	mock *MockViewService
}

// NewMockViewService creates a new mock instance.
func NewMockViewService(ctrl *gomock.Controller) *MockViewService {
	mock := &MockViewService{ctrl: ctrl}
	mock.recorder = &MockViewServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockViewService) EXPECT() *MockViewServiceMockRecorder {
	return m.recorder
}

// GetCertificates mocks base method.
func (m *MockViewService) GetCertificates(ctx context.Context, orgID mo.Option[identifiers.OrganizationID], certificateIDs []assets.CertificateID) (view.CertificatesResult, cenclierrors.CencliError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificates", ctx, orgID, certificateIDs)
	ret0, _ := ret[0].(view.CertificatesResult)
	ret1, _ := ret[1].(cenclierrors.CencliError)
	return ret0, ret1
}

// GetCertificates indicates an expected call of GetCertificates.
func (mr *MockViewServiceMockRecorder) GetCertificates(ctx, orgID, certificateIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificates", reflect.TypeOf((*MockViewService)(nil).GetCertificates), ctx, orgID, certificateIDs)
}

// GetHosts mocks base method.
func (m *MockViewService) GetHosts(ctx context.Context, orgID mo.Option[identifiers.OrganizationID], hostIDs []assets.HostID, atTime mo.Option[time.Time]) (view.HostsResult, cenclierrors.CencliError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHosts", ctx, orgID, hostIDs, atTime)
	ret0, _ := ret[0].(view.HostsResult)
	ret1, _ := ret[1].(cenclierrors.CencliError)
	return ret0, ret1
}

// GetHosts indicates an expected call of GetHosts.
func (mr *MockViewServiceMockRecorder) GetHosts(ctx, orgID, hostIDs, atTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHosts", reflect.TypeOf((*MockViewService)(nil).GetHosts), ctx, orgID, hostIDs, atTime)
}

// GetWebProperties mocks base method.
func (m *MockViewService) GetWebProperties(ctx context.Context, orgID mo.Option[identifiers.OrganizationID], webPropertyIDs []assets.WebPropertyID, atTime mo.Option[time.Time]) (view.WebPropertiesResult, cenclierrors.CencliError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebProperties", ctx, orgID, webPropertyIDs, atTime)
	ret0, _ := ret[0].(view.WebPropertiesResult)
	ret1, _ := ret[1].(cenclierrors.CencliError)
	return ret0, ret1
}

// GetWebProperties indicates an expected call of GetWebProperties.
func (mr *MockViewServiceMockRecorder) GetWebProperties(ctx, orgID, webPropertyIDs, atTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebProperties", reflect.TypeOf((*MockViewService)(nil).GetWebProperties), ctx, orgID, webPropertyIDs, atTime)
}
