// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/censys/cencli/internal/app/censeye (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination=../../../gen/app/censeye/mocks/censeyeservice_mock.go -package=mocks -mock_names Service=MockCenseyeService . Service
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	censeye "github.com/censys/cencli/internal/app/censeye"
	cenclierrors "github.com/censys/cencli/internal/pkg/cenclierrors"
	assets "github.com/censys/cencli/internal/pkg/domain/assets"
	identifiers "github.com/censys/cencli/internal/pkg/domain/identifiers"
	mo "github.com/samber/mo"
	gomock "go.uber.org/mock/gomock"
)

// MockCenseyeService is a mock of Service interface.
type MockCenseyeService struct {
	ctrl     *gomock.Controller
	recorder *MockCenseyeServiceMockRecorder
	isgomock struct{}
}

// MockCenseyeServiceMockRecorder is the mock recorder for MockCenseyeService.
type MockCenseyeServiceMockRecorder struct {
	mock *MockCenseyeService
}

// NewMockCenseyeService creates a new mock instance.
func NewMockCenseyeService(ctrl *gomock.Controller) *MockCenseyeService {
	mock := &MockCenseyeService{ctrl: ctrl}
	mock.recorder = &MockCenseyeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCenseyeService) EXPECT() *MockCenseyeServiceMockRecorder {
	return m.recorder
}

// InvestigateHost mocks base method.
func (m *MockCenseyeService) InvestigateHost(ctx context.Context, orgID mo.Option[identifiers.OrganizationID], host *assets.Host, rarityMin, rarityMax uint64) (censeye.InvestigateHostResult, cenclierrors.CencliError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvestigateHost", ctx, orgID, host, rarityMin, rarityMax)
	ret0, _ := ret[0].(censeye.InvestigateHostResult)
	ret1, _ := ret[1].(cenclierrors.CencliError)
	return ret0, ret1
}

// InvestigateHost indicates an expected call of InvestigateHost.
func (mr *MockCenseyeServiceMockRecorder) InvestigateHost(ctx, orgID, host, rarityMin, rarityMax any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvestigateHost", reflect.TypeOf((*MockCenseyeService)(nil).InvestigateHost), ctx, orgID, host, rarityMin, rarityMax)
}
