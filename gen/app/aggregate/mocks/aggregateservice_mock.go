// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/censys/cencli/internal/app/aggregate (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination=../../../gen/app/aggregate/mocks/aggregateservice_mock.go -package=mocks -mock_names Service=MockAggregateService . Service
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	aggregate "github.com/censys/cencli/internal/app/aggregate"
	cenclierrors "github.com/censys/cencli/internal/pkg/cenclierrors"
	gomock "go.uber.org/mock/gomock"
)

// MockAggregateService is a mock of Service interface.
type MockAggregateService struct {
	ctrl     *gomock.Controller
	recorder *MockAggregateServiceMockRecorder
	isgomock struct{}
}

// MockAggregateServiceMockRecorder is the mock recorder for MockAggregateService.
type MockAggregateServiceMockRecorder struct {
	mock *MockAggregateService
}

// NewMockAggregateService creates a new mock instance.
func NewMockAggregateService(ctrl *gomock.Controller) *MockAggregateService {
	mock := &MockAggregateService{ctrl: ctrl}
	mock.recorder = &MockAggregateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAggregateService) EXPECT() *MockAggregateServiceMockRecorder {
	return m.recorder
}

// Aggregate mocks base method.
func (m *MockAggregateService) Aggregate(ctx context.Context, params aggregate.Params) (aggregate.Result, cenclierrors.CencliError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate", ctx, params)
	ret0, _ := ret[0].(aggregate.Result)
	ret1, _ := ret[1].(cenclierrors.CencliError)
	return ret0, ret1
}

// Aggregate indicates an expected call of Aggregate.
func (mr *MockAggregateServiceMockRecorder) Aggregate(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockAggregateService)(nil).Aggregate), ctx, params)
}
