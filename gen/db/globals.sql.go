// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: globals.sql

package db

import (
	"context"
)

const deleteGlobal = `-- name: DeleteGlobal :one
DELETE FROM
    globals
WHERE
    id = ?
RETURNING
    id, name, description, value, created_at, last_used_at
`

func (q *Queries) DeleteGlobal(ctx context.Context, id int64) (Global, error) {
	row := q.db.QueryRowContext(ctx, deleteGlobal, id)
	var i Global
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Value,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const getGlobalsByName = `-- name: GetGlobalsByName :many
SELECT
    id, name, description, value, created_at, last_used_at
FROM
    globals
WHERE
    name = ?
ORDER BY
    id ASC
`

func (q *Queries) GetGlobalsByName(ctx context.Context, name string) ([]Global, error) {
	rows, err := q.db.QueryContext(ctx, getGlobalsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Global
	for rows.Next() {
		var i Global
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Value,
			&i.CreatedAt,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastUsedGlobalByName = `-- name: GetLastUsedGlobalByName :one
SELECT
    id, name, description, value, created_at, last_used_at
FROM
    globals
WHERE
    name = ?
ORDER BY
    last_used_at DESC
LIMIT 1
`

func (q *Queries) GetLastUsedGlobalByName(ctx context.Context, name string) (Global, error) {
	row := q.db.QueryRowContext(ctx, getLastUsedGlobalByName, name)
	var i Global
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Value,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const insertGlobal = `-- name: InsertGlobal :one
INSERT INTO
    globals (name, description, value, created_at, last_used_at)
VALUES
    (?, ?, ?, ?, ?)
RETURNING
    id
`

type InsertGlobalParams struct {
	Name        string
	Description string
	Value       string
	CreatedAt   string
	LastUsedAt  string
}

func (q *Queries) InsertGlobal(ctx context.Context, arg InsertGlobalParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertGlobal,
		arg.Name,
		arg.Description,
		arg.Value,
		arg.CreatedAt,
		arg.LastUsedAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateGlobalLastUsedAt = `-- name: UpdateGlobalLastUsedAt :one
UPDATE
    globals
SET
    last_used_at = ?
WHERE
    id = ?
RETURNING
    id, name, description, value, created_at, last_used_at
`

type UpdateGlobalLastUsedAtParams struct {
	LastUsedAt string
	ID         int64
}

func (q *Queries) UpdateGlobalLastUsedAt(ctx context.Context, arg UpdateGlobalLastUsedAtParams) (Global, error) {
	row := q.db.QueryRowContext(ctx, updateGlobalLastUsedAt, arg.LastUsedAt, arg.ID)
	var i Global
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Value,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}
