// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: auths.sql

package db

import (
	"context"
)

const deleteAuth = `-- name: DeleteAuth :one
DELETE FROM
    auths
WHERE
    id = ?
RETURNING
    id, name, description, value, created_at, last_used_at
`

func (q *Queries) DeleteAuth(ctx context.Context, id int64) (Auth, error) {
	row := q.db.QueryRowContext(ctx, deleteAuth, id)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Value,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const getAuthsByName = `-- name: GetAuthsByName :many
SELECT
    id, name, description, value, created_at, last_used_at
FROM
    auths
WHERE
    name = ?
ORDER BY
    id ASC
`

func (q *Queries) GetAuthsByName(ctx context.Context, name string) ([]Auth, error) {
	rows, err := q.db.QueryContext(ctx, getAuthsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Auth
	for rows.Next() {
		var i Auth
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Value,
			&i.CreatedAt,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastUsedAuthByName = `-- name: GetLastUsedAuthByName :one
SELECT
    id, name, description, value, created_at, last_used_at
FROM
    auths
WHERE
    name = ?
ORDER BY
    last_used_at DESC
LIMIT 1
`

func (q *Queries) GetLastUsedAuthByName(ctx context.Context, name string) (Auth, error) {
	row := q.db.QueryRowContext(ctx, getLastUsedAuthByName, name)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Value,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const insertAuth = `-- name: InsertAuth :one
INSERT INTO
    auths (name, description, value, created_at, last_used_at)
VALUES
    (?, ?, ?, ?, ?)
RETURNING
    id
`

type InsertAuthParams struct {
	Name        string
	Description string
	Value       string
	CreatedAt   string
	LastUsedAt  string
}

func (q *Queries) InsertAuth(ctx context.Context, arg InsertAuthParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertAuth,
		arg.Name,
		arg.Description,
		arg.Value,
		arg.CreatedAt,
		arg.LastUsedAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateAuthLastUsedAt = `-- name: UpdateAuthLastUsedAt :one
UPDATE
    auths
SET
    last_used_at = ?
WHERE
    id = ?
RETURNING
    id, name, description, value, created_at, last_used_at
`

type UpdateAuthLastUsedAtParams struct {
	LastUsedAt string
	ID         int64
}

func (q *Queries) UpdateAuthLastUsedAt(ctx context.Context, arg UpdateAuthLastUsedAtParams) (Auth, error) {
	row := q.db.QueryRowContext(ctx, updateAuthLastUsedAt, arg.LastUsedAt, arg.ID)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Value,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}
