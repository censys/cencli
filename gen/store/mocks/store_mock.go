// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/censys/cencli/internal/store (interfaces: Store,AuthsStore,GlobalsStore)
//
// Generated by this command:
//
//	mockgen -destination=../../gen/store/mocks/store_mock.go -package=mocks github.com/censys/cencli/internal/store Store,AuthsStore,GlobalsStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	store "github.com/censys/cencli/internal/store"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddValueForAuth mocks base method.
func (m *MockStore) AddValueForAuth(ctx context.Context, name, description, value string) (*store.ValueForAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddValueForAuth", ctx, name, description, value)
	ret0, _ := ret[0].(*store.ValueForAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddValueForAuth indicates an expected call of AddValueForAuth.
func (mr *MockStoreMockRecorder) AddValueForAuth(ctx, name, description, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddValueForAuth", reflect.TypeOf((*MockStore)(nil).AddValueForAuth), ctx, name, description, value)
}

// AddValueForGlobal mocks base method.
func (m *MockStore) AddValueForGlobal(ctx context.Context, name, description, value string) (*store.ValueForGlobal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddValueForGlobal", ctx, name, description, value)
	ret0, _ := ret[0].(*store.ValueForGlobal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddValueForGlobal indicates an expected call of AddValueForGlobal.
func (mr *MockStoreMockRecorder) AddValueForGlobal(ctx, name, description, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddValueForGlobal", reflect.TypeOf((*MockStore)(nil).AddValueForGlobal), ctx, name, description, value)
}

// DeleteValueForAuth mocks base method.
func (m *MockStore) DeleteValueForAuth(ctx context.Context, id int64) (*store.ValueForAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteValueForAuth", ctx, id)
	ret0, _ := ret[0].(*store.ValueForAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteValueForAuth indicates an expected call of DeleteValueForAuth.
func (mr *MockStoreMockRecorder) DeleteValueForAuth(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteValueForAuth", reflect.TypeOf((*MockStore)(nil).DeleteValueForAuth), ctx, id)
}

// DeleteValueForGlobal mocks base method.
func (m *MockStore) DeleteValueForGlobal(ctx context.Context, id int64) (*store.ValueForGlobal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteValueForGlobal", ctx, id)
	ret0, _ := ret[0].(*store.ValueForGlobal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteValueForGlobal indicates an expected call of DeleteValueForGlobal.
func (mr *MockStoreMockRecorder) DeleteValueForGlobal(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteValueForGlobal", reflect.TypeOf((*MockStore)(nil).DeleteValueForGlobal), ctx, id)
}

// GetLastUsedAuthByName mocks base method.
func (m *MockStore) GetLastUsedAuthByName(ctx context.Context, name string) (*store.ValueForAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastUsedAuthByName", ctx, name)
	ret0, _ := ret[0].(*store.ValueForAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastUsedAuthByName indicates an expected call of GetLastUsedAuthByName.
func (mr *MockStoreMockRecorder) GetLastUsedAuthByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastUsedAuthByName", reflect.TypeOf((*MockStore)(nil).GetLastUsedAuthByName), ctx, name)
}

// GetLastUsedGlobalByName mocks base method.
func (m *MockStore) GetLastUsedGlobalByName(ctx context.Context, name string) (*store.ValueForGlobal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastUsedGlobalByName", ctx, name)
	ret0, _ := ret[0].(*store.ValueForGlobal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastUsedGlobalByName indicates an expected call of GetLastUsedGlobalByName.
func (mr *MockStoreMockRecorder) GetLastUsedGlobalByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastUsedGlobalByName", reflect.TypeOf((*MockStore)(nil).GetLastUsedGlobalByName), ctx, name)
}

// GetValuesForAuth mocks base method.
func (m *MockStore) GetValuesForAuth(ctx context.Context, name string) ([]*store.ValueForAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValuesForAuth", ctx, name)
	ret0, _ := ret[0].([]*store.ValueForAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValuesForAuth indicates an expected call of GetValuesForAuth.
func (mr *MockStoreMockRecorder) GetValuesForAuth(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValuesForAuth", reflect.TypeOf((*MockStore)(nil).GetValuesForAuth), ctx, name)
}

// GetValuesForGlobal mocks base method.
func (m *MockStore) GetValuesForGlobal(ctx context.Context, name string) ([]*store.ValueForGlobal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValuesForGlobal", ctx, name)
	ret0, _ := ret[0].([]*store.ValueForGlobal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValuesForGlobal indicates an expected call of GetValuesForGlobal.
func (mr *MockStoreMockRecorder) GetValuesForGlobal(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValuesForGlobal", reflect.TypeOf((*MockStore)(nil).GetValuesForGlobal), ctx, name)
}

// UpdateAuthLastUsedAtToNow mocks base method.
func (m *MockStore) UpdateAuthLastUsedAtToNow(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthLastUsedAtToNow", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthLastUsedAtToNow indicates an expected call of UpdateAuthLastUsedAtToNow.
func (mr *MockStoreMockRecorder) UpdateAuthLastUsedAtToNow(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthLastUsedAtToNow", reflect.TypeOf((*MockStore)(nil).UpdateAuthLastUsedAtToNow), ctx, id)
}

// UpdateGlobalLastUsedAtToNow mocks base method.
func (m *MockStore) UpdateGlobalLastUsedAtToNow(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalLastUsedAtToNow", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGlobalLastUsedAtToNow indicates an expected call of UpdateGlobalLastUsedAtToNow.
func (mr *MockStoreMockRecorder) UpdateGlobalLastUsedAtToNow(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalLastUsedAtToNow", reflect.TypeOf((*MockStore)(nil).UpdateGlobalLastUsedAtToNow), ctx, id)
}

// MockAuthsStore is a mock of AuthsStore interface.
type MockAuthsStore struct {
	ctrl     *gomock.Controller
	recorder *MockAuthsStoreMockRecorder
	isgomock struct{}
}

// MockAuthsStoreMockRecorder is the mock recorder for MockAuthsStore.
type MockAuthsStoreMockRecorder struct {
	mock *MockAuthsStore
}

// NewMockAuthsStore creates a new mock instance.
func NewMockAuthsStore(ctrl *gomock.Controller) *MockAuthsStore {
	mock := &MockAuthsStore{ctrl: ctrl}
	mock.recorder = &MockAuthsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthsStore) EXPECT() *MockAuthsStoreMockRecorder {
	return m.recorder
}

// AddValueForAuth mocks base method.
func (m *MockAuthsStore) AddValueForAuth(ctx context.Context, name, description, value string) (*store.ValueForAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddValueForAuth", ctx, name, description, value)
	ret0, _ := ret[0].(*store.ValueForAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddValueForAuth indicates an expected call of AddValueForAuth.
func (mr *MockAuthsStoreMockRecorder) AddValueForAuth(ctx, name, description, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddValueForAuth", reflect.TypeOf((*MockAuthsStore)(nil).AddValueForAuth), ctx, name, description, value)
}

// DeleteValueForAuth mocks base method.
func (m *MockAuthsStore) DeleteValueForAuth(ctx context.Context, id int64) (*store.ValueForAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteValueForAuth", ctx, id)
	ret0, _ := ret[0].(*store.ValueForAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteValueForAuth indicates an expected call of DeleteValueForAuth.
func (mr *MockAuthsStoreMockRecorder) DeleteValueForAuth(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteValueForAuth", reflect.TypeOf((*MockAuthsStore)(nil).DeleteValueForAuth), ctx, id)
}

// GetLastUsedAuthByName mocks base method.
func (m *MockAuthsStore) GetLastUsedAuthByName(ctx context.Context, name string) (*store.ValueForAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastUsedAuthByName", ctx, name)
	ret0, _ := ret[0].(*store.ValueForAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastUsedAuthByName indicates an expected call of GetLastUsedAuthByName.
func (mr *MockAuthsStoreMockRecorder) GetLastUsedAuthByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastUsedAuthByName", reflect.TypeOf((*MockAuthsStore)(nil).GetLastUsedAuthByName), ctx, name)
}

// GetValuesForAuth mocks base method.
func (m *MockAuthsStore) GetValuesForAuth(ctx context.Context, name string) ([]*store.ValueForAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValuesForAuth", ctx, name)
	ret0, _ := ret[0].([]*store.ValueForAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValuesForAuth indicates an expected call of GetValuesForAuth.
func (mr *MockAuthsStoreMockRecorder) GetValuesForAuth(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValuesForAuth", reflect.TypeOf((*MockAuthsStore)(nil).GetValuesForAuth), ctx, name)
}

// UpdateAuthLastUsedAtToNow mocks base method.
func (m *MockAuthsStore) UpdateAuthLastUsedAtToNow(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthLastUsedAtToNow", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthLastUsedAtToNow indicates an expected call of UpdateAuthLastUsedAtToNow.
func (mr *MockAuthsStoreMockRecorder) UpdateAuthLastUsedAtToNow(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthLastUsedAtToNow", reflect.TypeOf((*MockAuthsStore)(nil).UpdateAuthLastUsedAtToNow), ctx, id)
}

// MockGlobalsStore is a mock of GlobalsStore interface.
type MockGlobalsStore struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalsStoreMockRecorder
	isgomock struct{}
}

// MockGlobalsStoreMockRecorder is the mock recorder for MockGlobalsStore.
type MockGlobalsStoreMockRecorder struct {
	mock *MockGlobalsStore
}

// NewMockGlobalsStore creates a new mock instance.
func NewMockGlobalsStore(ctrl *gomock.Controller) *MockGlobalsStore {
	mock := &MockGlobalsStore{ctrl: ctrl}
	mock.recorder = &MockGlobalsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalsStore) EXPECT() *MockGlobalsStoreMockRecorder {
	return m.recorder
}

// AddValueForGlobal mocks base method.
func (m *MockGlobalsStore) AddValueForGlobal(ctx context.Context, name, description, value string) (*store.ValueForGlobal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddValueForGlobal", ctx, name, description, value)
	ret0, _ := ret[0].(*store.ValueForGlobal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddValueForGlobal indicates an expected call of AddValueForGlobal.
func (mr *MockGlobalsStoreMockRecorder) AddValueForGlobal(ctx, name, description, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddValueForGlobal", reflect.TypeOf((*MockGlobalsStore)(nil).AddValueForGlobal), ctx, name, description, value)
}

// DeleteValueForGlobal mocks base method.
func (m *MockGlobalsStore) DeleteValueForGlobal(ctx context.Context, id int64) (*store.ValueForGlobal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteValueForGlobal", ctx, id)
	ret0, _ := ret[0].(*store.ValueForGlobal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteValueForGlobal indicates an expected call of DeleteValueForGlobal.
func (mr *MockGlobalsStoreMockRecorder) DeleteValueForGlobal(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteValueForGlobal", reflect.TypeOf((*MockGlobalsStore)(nil).DeleteValueForGlobal), ctx, id)
}

// GetLastUsedGlobalByName mocks base method.
func (m *MockGlobalsStore) GetLastUsedGlobalByName(ctx context.Context, name string) (*store.ValueForGlobal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastUsedGlobalByName", ctx, name)
	ret0, _ := ret[0].(*store.ValueForGlobal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastUsedGlobalByName indicates an expected call of GetLastUsedGlobalByName.
func (mr *MockGlobalsStoreMockRecorder) GetLastUsedGlobalByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastUsedGlobalByName", reflect.TypeOf((*MockGlobalsStore)(nil).GetLastUsedGlobalByName), ctx, name)
}

// GetValuesForGlobal mocks base method.
func (m *MockGlobalsStore) GetValuesForGlobal(ctx context.Context, name string) ([]*store.ValueForGlobal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValuesForGlobal", ctx, name)
	ret0, _ := ret[0].([]*store.ValueForGlobal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValuesForGlobal indicates an expected call of GetValuesForGlobal.
func (mr *MockGlobalsStoreMockRecorder) GetValuesForGlobal(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValuesForGlobal", reflect.TypeOf((*MockGlobalsStore)(nil).GetValuesForGlobal), ctx, name)
}

// UpdateGlobalLastUsedAtToNow mocks base method.
func (m *MockGlobalsStore) UpdateGlobalLastUsedAtToNow(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalLastUsedAtToNow", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGlobalLastUsedAtToNow indicates an expected call of UpdateGlobalLastUsedAtToNow.
func (mr *MockGlobalsStoreMockRecorder) UpdateGlobalLastUsedAtToNow(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalLastUsedAtToNow", reflect.TypeOf((*MockGlobalsStore)(nil).UpdateGlobalLastUsedAtToNow), ctx, id)
}
